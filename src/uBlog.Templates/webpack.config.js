var path = require('path');
var webpack = require('webpack');

//提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用
var commonsPlugin = new webpack.optimize.CommonsChunkPlugin('shared.js');
//将bundle中的css文本抽取出来形成独立文件
var ExtractTextPlugin = require('extract-text-webpack-plugin');
//Emits a JSON file that contains timestamps of your Webpack build
var TimestampWebpackPlugin = require('timestamp-webpack-plugin');
//Transfer files to the build directory(可以传送文件或文件夹)
var TransferWebpackPlugin = require('transfer-webpack-plugin');

//供postcss使用 start
var precss = require('precss');
var autoprefixer = require('autoprefixer');
//供postcss使用 end

module.exports ={

  //基础路径(绝对路径)，用来解析entry项
  context: path.resolve('js'),


  //字符串会被解析得到一个module
  //数组中的所有module都会被加载，数组中最后一个module会被导出(export)
  //如果你传一个对象，那么将会生成几个bundle

  entry:{
    index:'./index.js',
    editpost: './editpost.js'

  },
  output:{

    //[bundle].js存储的真实路径
    path: path.resolve('build/js/'),
    //使用devserver时，浏览器访问[bundle].js的虚拟路径
    publicPath:'/public/assets/js/',
    filename: "[name].js"


  },
  plugins:[
    commonsPlugin,
    //The extract-text-plugin generates an output file per entry,
    //so you must use [name],[id] or [contenthash] when using multiple entries.
    new ExtractTextPlugin("./css/[name][hash:8].css"),

    new webpack.ProvidePlugin({
      $:'jquery',
      jQuery:'jquery',
      'window.jQuery':'jquery'
    }),
    new webpack.ProvidePlugin({
      'window.Tether':'tether'
    }),
    //记录每次运行webpack的时间戳
    new TimestampWebpackPlugin({
      path:__dirname,
      filename:'timestamp.json'
    }),
    //添加banner到bundle.js文件
    new webpack.BannerPlugin("****\ngenerated by webpack\n**********\n"),
    new webpack.HotModuleReplacementPlugin(),

    new TransferWebpackPlugin([{from:'epiceditor' , to:"../../public/epiceditor"}], path.join(__dirname, "node_modules/epiceditor"))
  ],
  devServer:{
    hot:true,
    inline:true,
    contentBase: 'public'
  },
  devtool: 'eval-source-map',

  module:{
    preloaders:[
      {
        test:/\.js$/,
        exclude:'node_modules',
        loader:'jshint-loader'
      }
    ],
    loaders:[
      {
        test:/\.(js|es6)$/,
        exclude:/node_modules/,
        loader:"babel-loader"
      },
      {
        test:/\.css$/,
        loader: ExtractTextPlugin.extract("style-loader","css-loader!postcss-loader")
      },
      {
        test:/\.scss$/,
        exclude:/node_modules/,
        //ExtractTextPlugin.extract() Creates an extracting loader from an existing loader
        loader: ExtractTextPlugin.extract("style-loader","css-loader!postcss-loader!sass-loader")
      },
      {
        test:/\.(ttf|eot)$/,
        exclude:/node_modules/,
        loader:'url-loader?limit=10000'
      },
      {
        test:/\.(jpg|png)$/,
        loader:'file?name=[path][name].[hash].[ext]'
      },
      // the url-loader uses DataUrls.
      // the file-loader emits files.
      {
        test: /\.woff2?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
        // Limiting the size of the woff fonts breaks font-awesome ONLY for the extract text plugin
        // loader: "url?limit=10000"
        loader: "url"
      },
      {
        test: /\.(ttf|eot|svg)(\?[\s\S]+)?$/,
        loader: 'file'
      }
    ]
  },
  //PostCSS plugins go here
  postcss: function(){
    return [precss, autoprefixer];
  },
  resolve:{
    extensions:['','.js','.es6']
  }
};

//webpack -p
//    is production build
//webpack --config webpack-production.config.js -p
//    以指定的config文件为生产环境进行一次build


